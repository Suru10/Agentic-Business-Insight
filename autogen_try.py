# biz_backend.py
from __future__ import annotations
import os, json, sqlite3, asyncio
from typing import AsyncGenerator

import pandas as pd
from autogen_core.tools import FunctionTool
from autogen_agentchat.agents import AssistantAgent
from autogen_agentchat.teams import RoundRobinGroupChat
from autogen_agentchat.messages import TextMessage
from autogen_ext.models.openai import OpenAIChatCompletionClient
from dotenv import load_dotenv

load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")

#####################################################################
# 0. — helpers
#####################################################################
def inspect_schema(db_path: str) -> str:
    """Return a text description of all tables/columns in the DB."""
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    schema_desc = []
    for row in cur.execute(
        "SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%';"
    ).fetchall():
        tbl = row[0]
        cols = cur.execute(f"PRAGMA table_info('{tbl}')").fetchall()
        col_desc = ", ".join(f"{c[1]} ({c[2]})" for c in cols)
        schema_desc.append(f"- {tbl}: {col_desc}")
    conn.close()
    return "\n".join(schema_desc)


#####################################################################
# 1. — tool: run SQL & return JSON (+ preview markdown)
#####################################################################
def make_sql_tool(db_path: str) -> FunctionTool:
    def run_sql(sql: str) -> str:
        """Executes SQL and returns:
        ```
        {
          "preview_markdown": "...table in Markdown...",
          "data_json": "...pandas.to_json(orient='split')..."
        }
        ```"""
        conn = sqlite3.connect(db_path)
        df = pd.read_sql(sql, conn)
        conn.close()

        md = df.head(20).to_markdown(index=False)  # small preview
        return json.dumps(
            {"preview_markdown": md, "data_json": df.to_json(orient="split")},
            indent=2,
        )

    return FunctionTool(
        run_sql,
        name="run_sql",
        description=(
            "Execute an SQL SELECT on the company database. "
            "Return a JSON dict with fields 'preview_markdown' and 'data_json'."
        ),
    )


#####################################################################
# 2. — build the agent team
#####################################################################
def build_team(db_path: str, model="gpt-4o-mini") -> RoundRobinGroupChat:
    llm = OpenAIChatCompletionClient(model=model, api_key=api_key)
    schema_txt = inspect_schema(db_path)
    sql_tool = make_sql_tool(db_path)

    sql_agent = AssistantAgent(
        name="SQLAgent",
        description="Writes & executes SQL to satisfy the business question.",
        system_message=(
            "You are a senior data engineer.\n"
            f"Database schema:\n{schema_txt}\n\n"
            "When you need data, CALL the run_sql tool with a VALID SQL SELECT. "
            "After getting the results, give a concise textual summary."
        ),
        tools=[sql_tool],
        model_client=llm,
        reflect_on_tool_use=True,
    )

    insight_agent = AssistantAgent(
        name="InsightAgent",
        description="Turns data into insights & chart specs.",
        system_message=(
            "You are a business analyst.\n"
            "You will see SQLAgent outputs that include:\n"
            "  • A Markdown preview of the data.\n"
            "  • A JSON string with the full DataFrame.\n\n"
            "Respond with:\n"
            "1️⃣ A bullet-point insight summary.\n"
            "2️⃣ Zero or more charts in **Vega-Lite spec**, each on its own line "
            "starting with 'CHART_JSON:'.  "
            "Base charts on the columns available in the data_json.\n"
            "The Streamlit app will automatically render any CHART_JSON lines."
        ),
        model_client=llm,
    )

    # Conversation alternates: SQL-Agent → Insight-Agent
    return RoundRobinGroupChat(
        participants=[sql_agent, insight_agent],
        max_turns=3,   # usually enough for 1–2 data fetches + analysis
    )


#####################################################################
# 3. — orchestrator
#####################################################################
async def run_business_query(
    db_path: str,
    user_request: str,
    model="gpt-4o-mini",
) -> AsyncGenerator[str, None]:
    """
    Stream all messages (role: content) generated by the agent team.
    """
    team = build_team(db_path, model=model)
    task_prompt = (
        f"Business question from end-user: {user_request}\n"
        "Produce clear insights and any useful charts."
    )

    async for msg in team.run_stream(task=task_prompt):
        if isinstance(msg, TextMessage):
            yield f"{msg.source}: {msg.content}"
