# pages/Dashboard.py
import json, streamlit as st, pandas as pd, altair as alt

st.set_page_config(page_title="📊 Dashboard", page_icon="📈")
st.title("📊 Auto-Generated Business Dashboard")

payload = st.session_state.get("dashboard_payload")

if not payload:
    st.info("Run a query on the **Home** page first.")
    st.stop()

st.subheader(f"📝 Question: “{payload['question']}”")

# --------------------------------------------------
# 1.  Insight bullets
# --------------------------------------------------
st.markdown("### ✨ Key Insights")
for bullet in payload["insights"]:
    st.markdown(bullet)

# --------------------------------------------------
# 2.  KPI strip  (auto-detect simple metrics)
# --------------------------------------------------
if payload["frames"]:
    df0 = pd.read_json(payload["frames"][0], orient="split")
    with st.container():
        cols = st.columns(min(4, len(df0.columns)))
        for col_idx, col_name in enumerate(df0.select_dtypes("number").columns[:4]):
            metric_val = df0[col_name].sum() if df0[col_name].sum() > 10 else df0[col_name].mean()
            cols[col_idx].metric(col_name.replace("_", " ").title(), f"{metric_val:,.2f}")

# --------------------------------------------------
# 3.  Render charts
# --------------------------------------------------
st.markdown("### 📈 Visuals")
for spec in payload["charts"]:
    st.vega_lite_chart(spec, use_container_width=True)

# --------------------------------------------------
# 4.  Data explorer (full frame list)
# --------------------------------------------------
st.markdown("### 🔍 Data Explorer")
for idx, frame_json in enumerate(payload["frames"], 1):
    df = pd.read_json(frame_json, orient="split")
    with st.expander(f"DataFrame #{idx} ({len(df)} rows)"):
        st.dataframe(df, use_container_width=True)
        # optional download
        csv = df.to_csv(index=False).encode()
        st.download_button("Download CSV", csv, f"dataframe_{idx}.csv", "text/csv")

st.caption("Dashboard generated by autonomous agents · Powered by Streamlit, Vega-Lite & OpenAI")
